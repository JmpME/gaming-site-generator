import os
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import zipfile
import io
import random
import string
import json
import subprocess
import signal
import time
import threading
from datetime import datetime

VERSION = "2.2.0"

# –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
SITE_TITLES = [
    "Premium Gaming Universe 2025",
    "Elite Gaming World 2025",
    "Ultimate Gaming Zone 2025",
    "Pro Gaming Hub 2025",
    "Gaming Paradise 2025",
    "Gaming Masters 2025",
    "Gaming Legends 2025",
    "Gaming Empire 2025"
]

GAME_NAMES = [
    "NexusPlay",
    "GameVortex",
    "PlayMaster",
    "GamePulse",
    "PlayNova",
    "GameForge",
    "PlayPrime",
    "GameNexus",
    "PlayElite",
    "GameSphere"
]

BADGES = [
    ["Elite Choice", "Premium Pick", "Top Rated", "Best Choice", "Editor's Choice"],
    ["3M+ Users", "5M+ Players", "2M+ Gamers", "4M+ Active", "1M+ Daily"]
]

def randomize_content(template):
    """–ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π"""
    # –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    title = random.choice(SITE_TITLES)
    game_name = random.choice(GAME_NAMES)
    badge1 = random.choice(BADGES[0])
    badge2 = random.choice(BADGES[1])
    rating = f"{random.uniform(4.5, 5.0):.1f}"
    users = f"{random.randint(1, 5)}M+"
    langs = str(random.randint(20, 50))
    
    # –ó–∞–º–µ–Ω—ã –≤ —à–∞–±–ª–æ–Ω–µ
    template = template.replace("Premium Gaming Universe 2025", title)
    template = template.replace("NexusPlay", game_name)
    template = template.replace("Elite Choice", badge1)
    template = template.replace("3M+ Users", badge2)
    template = template.replace("‚≠ê 4.9", f"‚≠ê {rating}")
    template = template.replace("üë• 3M+ active", f"üë• {users} active")
    template = template.replace("üåç 30 langs", f"üåç {langs} langs")
    
    return template

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON
with open('config.json', 'r') as f:
    config = json.load(f)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
TOKEN = config.get('token')
ALLOWED_USERS = config.get('allowed_users', [])

def generate_site(theme=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–π—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏–∑ templates"""
    files = {}
    template_files = [
        'index.php',
        'redirect.php',
        'config.php',
        'jmpDG.php',
        'styles.css',
        'privacy.php',
        'terms.php',
        'check.php'
    ]
    
    for file in template_files:
        with open(f'templates/{file}', 'r') as f:
            content = f.read()
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –∫ index.php
            if file == 'index.php':
                content = randomize_content(content)
            files[file] = content
    
    return files

def create_zip(files):
    """–°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ –≤ –ø–∞–º—è—Ç–∏"""
    memory_zip = io.BytesIO()
    with zipfile.ZipFile(memory_zip, 'w') as zf:
        for fname, content in files.items():
            zf.writestr(fname, content)
    memory_zip.seek(0)
    return memory_zip

def start(update, context):
    if update.message.from_user.username not in ALLOWED_USERS:
        update.message.reply_text("‚õî Access denied")
        return
    
    update.message.reply_text(
        f"üéÆ Gaming Site Generator v{VERSION}\n\n"
        "Available commands:\n"
        "/generate - create site with random theme\n"
        "/theme [color] - create site with specific color theme\n"
        "/update - update bot to latest version\n"
        "/restart - restart bot service\n\n"
        "Available colors: purple, blue, cyber, neon, sunset, forest, cherry, midnight, aurora, volcano, galaxy, ocean\n\n"
        "üéØ All sites include:\n"
        "- Responsive design\n"
        "- Palladium integration\n"
        "- Tracking parameters\n"
        "- Mobile optimization"
    )

def generate_site_command(update, context):
    if update.message.from_user.username not in ALLOWED_USERS:
        update.message.reply_text("‚õî Access denied")
        return

    update.message.reply_text("üîÑ Generating site...")
    
    try:
        files = generate_site()
        zip_file = create_zip(files)
        
        update.message.reply_document(
            document=zip_file,
            filename=f'gaming_site_{random_string()}.zip',
            caption="‚úÖ Site generated successfully!"
        )
    except Exception as e:
        update.message.reply_text(f"‚ùå Error: {str(e)}")

def theme_command(update, context):
    if update.message.from_user.username not in ALLOWED_USERS:
        update.message.reply_text("‚õî Access denied")
        return

    theme = ' '.join(context.args) if context.args else None
    
    if not theme:
        update.message.reply_text("Please specify a theme color!")
        return
        
    update.message.reply_text(f"üîÑ Generating site with {theme} theme...")
    
    try:
        files = generate_site(theme)
        zip_file = create_zip(files)
        
        update.message.reply_document(
            document=zip_file,
            filename=f'gaming_site_{theme}_{random_string()}.zip',
            caption="‚úÖ Site generated successfully!"
        )
    except Exception as e:
        update.message.reply_text(f"‚ùå Error: {str(e)}")

def random_string():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))

def update_command(update, context):
    if update.message.from_user.username not in ALLOWED_USERS:
        update.message.reply_text("‚õî Access denied")
        return
    
    update.message.reply_text("üîÑ Starting update from GitHub...")
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        from update_from_github import update_files
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        success = update_files()
        
        if success:
            update.message.reply_text(f"‚úÖ Update completed successfully!\n‚ú® Current version: v{VERSION}\nüîÑ Restarting bot...")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            with open('restart_trigger', 'w') as f:
                f.write(f'update_restart_{datetime.now().strftime("%Y%m%d_%H%M%S")}')
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            os.kill(os.getpid(), signal.SIGTERM)
        else:
            update.message.reply_text("‚ùå Update failed, check server logs for details")
            
    except Exception as e:
        update.message.reply_text(f"‚ùå Error during update: {str(e)}")

def restart_command(update, context):
    if update.message.from_user.username not in ALLOWED_USERS:
        update.message.reply_text("‚õî Access denied")
        return
    
    update.message.reply_text("üîÑ Restarting bot...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        with open('restart_trigger', 'w') as f:
            f.write(f'manual_restart_{datetime.now().strftime("%Y%m%d_%H%M%S")}')
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        os.kill(os.getpid(), signal.SIGTERM)
        
    except Exception as e:
        update.message.reply_text(f"‚ùå Error during restart: {str(e)}")

def auto_restart():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    while True:
        time.sleep(600)  # 10 –º–∏–Ω—É—Ç
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            with open('restart_trigger', 'w') as f:
                f.write(f'auto_restart_{datetime.now().strftime("%Y%m%d_%H%M%S")}')
            
            print(f"Auto-restart triggered at {datetime.now()}")
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            os.kill(os.getpid(), signal.SIGTERM)
        except Exception as e:
            print(f"Error in auto_restart: {str(e)}")

def log_restart(update, context):
    if os.path.exists('restart.log'):
        with open('restart.log', 'a') as f:
            f.write(f"{datetime.now()}: Bot restarted\n")
    else:
        with open('restart.log', 'w') as f:
            f.write(f"{datetime.now()}: Bot started\n")

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞-—Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if os.path.exists('restart_trigger'):
        os.remove('restart_trigger')
        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    restart_thread = threading.Thread(target=auto_restart, daemon=True)
    restart_thread.start()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("generate", generate_site_command))
    dp.add_handler(CommandHandler("theme", theme_command))
    dp.add_handler(CommandHandler("update", update_command))
    dp.add_handler(CommandHandler("restart", restart_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
    dp.add_handler(MessageHandler(Filters.status_update.new_chat_members, log_restart))

    print(f"Bot started v{VERSION}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main() 