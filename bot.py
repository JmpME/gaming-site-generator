import os
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import zipfile
import io
import random
import string
import json
import subprocess
import signal
import time
import threading
from datetime import datetime, timedelta
import pytz
import asyncio

VERSION = "2.1.1"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON
with open('config.json', 'r') as f:
    config = json.load(f)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
TOKEN = config['token']
ALLOWED_USERS = config['allowed_users']

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TIMEZONE = pytz.timezone('Europe/Kiev')

def generate_site(theme=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–π—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏–∑ templates"""
    files = {}
    template_files = [
        'index.php',
        'redirect.php',
        'config.php',
        'jmpDG.php',
        'styles.css',
        'privacy.php',
        'terms.php',
        'check.php'
    ]
    
    for file in template_files:
        with open(f'templates/{file}', 'r') as f:
            files[file] = f.read()
    
    return files

def create_zip(files):
    """–°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ –≤ –ø–∞–º—è—Ç–∏"""
    memory_zip = io.BytesIO()
    with zipfile.ZipFile(memory_zip, 'w') as zf:
        for fname, content in files.items():
            zf.writestr(fname, content)
    memory_zip.seek(0)
    return memory_zip

async def start(update, context):
    if update.message.from_user.username not in ALLOWED_USERS:
        await update.message.reply_text("‚õî Access denied")
        return
    
    await update.message.reply_text(
        f"üéÆ Gaming Site Generator v{VERSION}\n\n"
        "Available commands:\n"
        "/generate - create site with random theme\n"
        "/theme [color] - create site with specific color theme\n"
        "/update - update bot to latest version\n"
        "/restart - restart bot service\n\n"
        "Available colors: purple, blue, cyber, neon, sunset, forest, cherry, midnight, aurora, volcano, galaxy, ocean\n\n"
        "üéØ All sites include:\n"
        "- Responsive design\n"
        "- Palladium integration\n"
        "- Tracking parameters\n"
        "- Mobile optimization"
    )

async def generate_site_command(update, context):
    if update.message.from_user.username not in ALLOWED_USERS:
        await update.message.reply_text("‚õî Access denied")
        return

    await update.message.reply_text("üîÑ Generating site...")
    
    try:
        files = generate_site()
        zip_file = create_zip(files)
        
        await update.message.reply_document(
            document=zip_file,
            filename=f'gaming_site_{random_string()}.zip',
            caption="‚úÖ Site generated successfully!"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå Error: {str(e)}")

async def theme_command(update, context):
    if update.message.from_user.username not in ALLOWED_USERS:
        await update.message.reply_text("‚õî Access denied")
        return

    theme = ' '.join(context.args) if context.args else None
    
    if not theme:
        await update.message.reply_text("Please specify a theme color!")
        return
        
    await update.message.reply_text(f"üîÑ Generating site with {theme} theme...")
    
    try:
        files = generate_site(theme)
        zip_file = create_zip(files)
        
        await update.message.reply_document(
            document=zip_file,
            filename=f'gaming_site_{theme}_{random_string()}.zip',
            caption="‚úÖ Site generated successfully!"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå Error: {str(e)}")

def random_string():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))

async def update_command(update, context):
    if update.message.from_user.username not in ALLOWED_USERS:
        await update.message.reply_text("‚õî Access denied")
        return
    
    await update.message.reply_text("üîÑ Starting update from GitHub...")
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        from update_from_github import update_files
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        success = update_files()
        
        if success:
            await update.message.reply_text(f"‚úÖ Update completed successfully!\n‚ú® Current version: v{VERSION}\nüîÑ Restarting bot...")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            with open('restart_trigger', 'w') as f:
                f.write(f'update_restart_{datetime.now().strftime("%Y%m%d_%H%M%S")}')
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            os.kill(os.getpid(), signal.SIGTERM)
        else:
            await update.message.reply_text("‚ùå Update failed, check server logs for details")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå Error during update: {str(e)}")

async def restart_command(update, context):
    if update.message.from_user.username not in ALLOWED_USERS:
        await update.message.reply_text("‚õî Access denied")
        return
    
    await update.message.reply_text("üîÑ Restarting bot...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        with open('restart_trigger', 'w') as f:
            f.write(f'manual_restart_{datetime.now().strftime("%Y%m%d_%H%M%S")}')
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        os.kill(os.getpid(), signal.SIGTERM)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå Error during restart: {str(e)}")

def auto_restart():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    while True:
        time.sleep(600)  # 10 –º–∏–Ω—É—Ç
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            with open('restart_trigger', 'w') as f:
                f.write(f'auto_restart_{datetime.now().strftime("%Y%m%d_%H%M%S")}')
            
            print(f"Auto-restart triggered at {datetime.now()}")
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            os.kill(os.getpid(), signal.SIGTERM)
        except Exception as e:
            print(f"Error in auto_restart: {str(e)}")

async def log_restart(update, context):
    if os.path.exists('restart.log'):
        with open('restart.log', 'a') as f:
            f.write(f"{datetime.now()}: Bot restarted\n")
    else:
        with open('restart.log', 'w') as f:
            f.write(f"{datetime.now()}: Bot started\n")

async def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞-—Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if os.path.exists('restart_trigger'):
        os.remove('restart_trigger')
        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    restart_thread = threading.Thread(target=auto_restart, daemon=True)
    restart_thread.start()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ job_queue
    application = Application.builder().token(TOKEN).job_queue(None).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("generate", generate_site_command))
    application.add_handler(CommandHandler("theme", theme_command))
    application.add_handler(CommandHandler("update", update_command))
    application.add_handler(CommandHandler("restart", restart_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, log_restart))

    print(f"Bot started v{VERSION}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main()) 